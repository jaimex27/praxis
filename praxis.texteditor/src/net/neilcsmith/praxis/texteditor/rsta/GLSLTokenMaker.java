/* The following code was generated by JFlex 1.4.3 on 04/05/13 17:55 */

package net.neilcsmith.praxis.texteditor.rsta;

import java.io.*;
import javax.swing.text.Segment;
import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for GLSL
 * Adapted from ---
 *
 * Scanner for the C programming language.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>CTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */

class GLSLTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\50\1\43\1\0\1\50\1\56\22\0\1\50\1\36\1\44"+
    "\1\57\1\60\1\65\1\102\1\33\1\31\1\31\1\51\1\7\1\64"+
    "\1\37\1\54\1\32\1\47\1\41\1\74\1\74\1\75\3\5\2\3"+
    "\1\70\1\63\1\34\1\30\1\35\1\27\1\61\3\4\1\77\1\6"+
    "\1\55\5\1\1\53\10\1\1\52\2\1\1\42\2\1\1\62\1\40"+
    "\1\62\1\101\1\2\1\0\1\24\1\46\1\21\1\10\1\11\1\12"+
    "\1\25\1\66\1\13\1\1\1\72\1\15\1\26\1\14\1\20\1\23"+
    "\1\1\1\17\1\16\1\67\1\22\1\45\1\71\1\76\1\73\1\1"+
    "\1\100\1\103\1\100\1\64\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\13\2\2\4\1\5"+
    "\1\4\1\6\4\4\1\2\1\7\1\10\2\2\1\3"+
    "\1\11\1\4\2\1\3\2\2\4\2\12\1\13\5\12"+
    "\1\14\2\12\2\15\2\3\1\16\2\2\1\17\3\2"+
    "\1\17\13\2\1\0\1\20\1\21\2\22\1\23\1\6"+
    "\2\10\1\24\5\2\1\15\6\1\1\0\2\2\2\0"+
    "\1\25\6\0\1\3\1\0\1\3\1\15\1\16\5\2"+
    "\1\26\12\2\1\6\1\27\1\6\3\22\1\6\2\10"+
    "\1\30\5\2\1\31\4\1\1\32\4\1\6\0\2\2"+
    "\10\0\1\16\1\0\15\2\1\26\1\6\1\10\2\2"+
    "\2\31\7\1\4\0\1\32\4\0\1\2\2\0\1\33"+
    "\2\0\1\34\14\2\1\31\1\32\3\1\7\0\1\2"+
    "\4\0\11\2\2\1\1\32\3\0\4\2\2\0\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u0550\0\u06a4\0\314\0\u0550\0\u06e8\0\u072c\0\u0770"+
    "\0\u07b4\0\u07f8\0\u083c\0\u0550\0\u0880\0\u0550\0\u08c4\0\u0908"+
    "\0\u094c\0\u0990\0\u09d4\0\u0a18\0\u0550\0\u0a5c\0\u0aa0\0\u0ae4"+
    "\0\u0b28\0\u0b6c\0\u0550\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0"+
    "\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0110\0\u0e14\0\u0e58\0\u0e9c"+
    "\0\u0ee0\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc"+
    "\0\u1100\0\u1144\0\u1188\0\u11cc\0\u1210\0\u0550\0\u0550\0\u1254"+
    "\0\u1298\0\u0550\0\u12dc\0\u1320\0\u1364\0\u0550\0\u13a8\0\u13ec"+
    "\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c"+
    "\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u0550"+
    "\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08"+
    "\0\u0c38\0\u1a4c\0\u0c38\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0"+
    "\0\u0110\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c"+
    "\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u0550\0\u1ed0\0\u1f14\0\u1f58"+
    "\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u0550\0\u20ac\0\u20f0\0\u2134"+
    "\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354"+
    "\0\u2398\0\u23dc\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u2574"+
    "\0\u25b8\0\u25fc\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794"+
    "\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u29b4"+
    "\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4"+
    "\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4"+
    "\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014"+
    "\0\u3058\0\u309c\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234"+
    "\0\u3278\0\u32bc\0\u3300\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454"+
    "\0\u3498\0\u34dc\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674"+
    "\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8\0\u0c38\0\314\0\u380c"+
    "\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3960\0\u39a4\0\u39e8\0\u3a2c"+
    "\0\u3a70\0\u3ab4\0\u3af8\0\u33cc\0\u3b3c\0\u3498\0\u3b80\0\u3bc4"+
    "\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0\0\u3de4"+
    "\0\u3e28\0\u0550\0\u3e6c\0\u3eb0\0\u3ef4\0\u3f38\0\u3f7c\0\u3fc0"+
    "\0\u4004\0\u4048\0\u408c\0\u40d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\2\5\1\14\1\15\1\16\1\17"+
    "\1\20\1\5\1\21\1\5\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\6"+
    "\1\5\1\35\1\36\1\37\1\40\1\41\1\42\1\24"+
    "\2\5\1\43\1\5\1\44\1\45\2\4\1\25\1\46"+
    "\1\32\1\24\1\5\1\47\1\32\1\50\2\5\2\6"+
    "\2\5\1\25\1\32\1\51\1\52\12\53\1\54\30\53"+
    "\1\55\5\53\1\56\14\53\1\57\2\53\1\60\12\53"+
    "\12\61\1\62\30\61\1\63\22\61\1\64\2\61\1\65"+
    "\12\61\7\4\1\0\17\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\7\4\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\7\5"+
    "\4\0\3\66\1\6\1\66\1\6\1\67\1\0\1\66"+
    "\1\67\3\66\1\70\4\66\1\71\4\66\11\0\1\66"+
    "\1\6\1\66\2\0\2\66\1\6\2\0\1\71\1\70"+
    "\1\72\1\66\1\0\3\66\4\0\2\66\1\0\3\66"+
    "\2\6\2\66\13\0\1\32\20\0\1\32\53\0\1\4"+
    "\6\5\1\0\1\5\1\73\1\5\1\74\4\5\1\75"+
    "\6\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\7\5\4\0\1\4\6\5\1\0\5\5\1\76"+
    "\11\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\7\5\4\0\1\4\6\5\1\0\5\5\1\77"+
    "\2\5\1\100\6\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\7\5\4\0\1\4\6\5\1\0"+
    "\2\5\1\75\1\5\1\101\12\5\11\0\1\4\2\5"+
    "\2\0\1\102\2\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\7\5\4\0"+
    "\1\4\6\5\1\0\14\5\1\103\2\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\104\1\0\1\105"+
    "\6\5\4\0\1\4\6\5\1\0\1\5\1\106\15\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\7\5\4\0\1\4\6\5\1\0\12\5\1\107\4\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\7\5\4\0\1\4\6\5\1\0\1\5\1\110\6\5"+
    "\1\111\3\5\1\76\2\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\7\5\4\0\1\4\6\5"+
    "\1\0\4\5\1\112\12\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\7\5\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\113\1\0\7\5\4\0\1\4\6\5\1\0"+
    "\14\5\1\114\2\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\7\5\33\0\1\115\104\0\1\32"+
    "\207\0\1\32\1\0\1\116\16\0\1\117\32\0\27\120"+
    "\1\121\3\120\1\122\4\120\1\123\2\120\1\0\40\120"+
    "\34\0\1\24\104\0\1\24\76\0\1\32\6\0\1\32"+
    "\44\0\40\36\1\124\2\36\1\125\1\126\37\36\1\4"+
    "\6\5\1\0\1\5\1\127\6\5\1\130\3\5\1\131"+
    "\2\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\7\5\4\0\1\4\6\5\1\0\7\5\1\132"+
    "\1\133\6\5\11\0\1\4\2\5\2\0\1\102\2\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\7\5\4\0\3\66\1\6\1\66"+
    "\1\6\1\67\1\0\1\66\1\67\3\66\1\70\4\66"+
    "\1\71\4\66\11\0\1\66\1\6\1\134\2\0\2\66"+
    "\1\6\2\0\1\71\1\70\1\72\1\66\1\0\3\66"+
    "\4\0\2\66\1\0\3\66\2\6\1\134\1\66\54\0"+
    "\1\42\36\0\1\72\1\0\1\72\33\0\1\72\5\0"+
    "\1\72\24\0\2\72\6\0\7\4\1\0\1\135\1\136"+
    "\1\4\1\137\1\4\1\140\4\4\1\141\1\142\3\4"+
    "\11\0\3\4\2\0\3\4\1\143\1\0\2\4\1\0"+
    "\1\4\1\0\3\4\4\0\2\4\1\0\7\4\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\2\5\1\144\4\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\1\145\1\5\1\0\7\5\106\0\1\32"+
    "\104\0\1\32\12\53\1\0\30\53\1\0\5\53\1\0"+
    "\14\53\1\0\2\53\1\0\12\53\13\0\1\146\53\0"+
    "\1\147\46\0\1\150\140\0\1\151\105\0\1\152\12\0"+
    "\12\61\1\0\30\61\1\0\22\61\1\0\2\61\1\0"+
    "\12\61\13\0\1\153\53\0\1\154\103\0\1\155\105\0"+
    "\1\156\12\0\7\66\1\0\17\66\11\0\3\66\2\0"+
    "\3\66\2\0\2\66\1\0\1\66\1\0\3\66\4\0"+
    "\2\66\1\0\7\66\4\0\3\66\1\157\1\66\1\157"+
    "\1\66\1\160\17\66\10\0\1\160\1\66\1\157\1\66"+
    "\2\0\2\66\1\157\2\0\2\66\1\0\1\66\1\0"+
    "\3\66\4\0\2\66\1\0\3\66\2\157\2\66\4\0"+
    "\7\66\1\0\12\66\1\161\4\66\11\0\3\66\2\0"+
    "\3\66\2\0\1\161\1\66\1\0\1\66\1\0\3\66"+
    "\4\0\2\66\1\0\7\66\4\0\7\66\1\0\5\66"+
    "\1\161\11\66\11\0\3\66\2\0\3\66\2\0\1\66"+
    "\1\161\1\0\1\66\1\0\3\66\4\0\2\66\1\0"+
    "\7\66\4\0\3\66\1\72\1\66\1\72\1\162\1\0"+
    "\1\66\1\162\1\163\2\66\1\163\11\66\11\0\1\66"+
    "\1\72\1\66\2\0\2\66\1\72\2\0\1\66\1\163"+
    "\1\0\1\163\1\0\3\66\4\0\2\66\1\0\3\66"+
    "\2\72\2\66\4\0\1\4\6\5\1\0\2\5\1\164"+
    "\14\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\7\5\4\0\1\4\6\5\1\0\6\5\1\165"+
    "\10\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\7\5\4\0\1\4\6\5\1\0\6\5\1\166"+
    "\10\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\7\5\4\0\1\4\6\5\1\0\10\5\1\167"+
    "\6\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\7\5\4\0\1\4\6\5\1\0\7\5\1\75"+
    "\7\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\7\5\4\0\1\4\6\5\1\0\10\5\1\16"+
    "\6\5\11\0\1\4\2\5\2\0\1\170\2\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\171\1\0\7\5\4\0\1\4\6\5\1\0"+
    "\1\5\1\127\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\7\5\4\0\1\4\6\5\1\0"+
    "\16\5\1\172\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\1\4\6\5\1\0\7\5"+
    "\1\173\7\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\1\4\6\5\1\0\3\5"+
    "\1\174\13\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\1\4\6\5\1\0\15\5"+
    "\1\175\1\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\176\1\0\7\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\75\1\0\7\5\4\0\1\4\6\5\1\0\4\5"+
    "\1\177\12\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\1\4\6\5\1\0\4\5"+
    "\1\200\12\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\1\4\6\5\1\0\3\5"+
    "\1\201\13\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\202"+
    "\1\0\7\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\203\1\0"+
    "\7\5\34\0\10\32\44\0\33\204\1\205\7\204\1\0"+
    "\67\204\1\206\3\204\1\205\7\204\1\0\45\204\1\207"+
    "\4\204\1\120\1\204\1\120\2\204\1\120\4\204\1\120"+
    "\2\204\1\120\3\204\1\210\4\204\1\120\1\211\1\212"+
    "\1\0\3\120\1\211\17\204\1\120\4\204\1\211\1\207"+
    "\1\212\5\204\5\125\1\36\4\125\1\36\1\125\1\36"+
    "\2\125\1\36\4\125\1\36\2\125\1\36\3\125\1\36"+
    "\4\125\2\36\1\213\1\0\4\36\17\125\1\36\4\125"+
    "\2\36\1\213\45\125\1\214\3\125\1\215\37\125\1\4"+
    "\6\5\1\0\11\5\1\216\5\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\7\5\4\0\1\4"+
    "\6\5\1\0\3\5\1\217\13\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\7\5\4\0\1\4"+
    "\6\5\1\0\7\5\1\220\7\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\7\5\4\0\1\4"+
    "\6\5\1\0\1\5\1\221\15\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\7\5\4\0\1\4"+
    "\6\5\1\0\10\5\1\222\6\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\7\5\4\0\3\66"+
    "\4\223\1\0\3\223\6\66\1\223\2\66\1\223\2\66"+
    "\11\0\1\66\1\223\1\66\2\0\1\66\2\223\2\0"+
    "\2\66\1\0\1\223\1\0\3\66\4\0\2\66\1\0"+
    "\3\66\2\223\1\66\1\223\4\0\7\4\1\0\1\4"+
    "\1\224\15\4\11\0\3\4\2\0\3\4\2\0\2\4"+
    "\1\0\1\4\1\0\3\4\4\0\2\4\1\0\7\4"+
    "\4\0\7\4\1\0\4\4\1\225\1\226\1\4\1\227"+
    "\7\4\11\0\3\4\2\0\3\4\2\0\2\4\1\0"+
    "\1\4\1\0\3\4\4\0\2\4\1\0\7\4\4\0"+
    "\7\4\1\0\2\4\1\230\1\4\1\231\12\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\7\4\4\0\7\4\1\0"+
    "\3\4\1\232\13\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\7\4\4\0\7\4\1\0\4\4\1\233\12\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\7\4\4\0\7\4\1\0"+
    "\7\4\1\234\7\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\7\4\14\0\1\235\1\236\1\0\1\237\1\0\1\240"+
    "\4\0\1\241\1\242\24\0\1\143\33\0\1\4\6\5"+
    "\1\0\13\5\1\243\3\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\7\5\4\0\1\4\6\5"+
    "\1\0\3\5\1\244\13\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\7\5\21\0\1\245\111\0"+
    "\1\246\147\0\1\247\105\0\1\250\27\0\1\251\111\0"+
    "\1\252\147\0\1\253\105\0\1\254\12\0\3\66\1\157"+
    "\1\66\1\157\1\66\1\0\5\66\1\70\4\66\1\71"+
    "\4\66\11\0\1\66\1\157\1\66\2\0\2\66\1\157"+
    "\2\0\1\71\1\70\1\0\1\66\1\0\3\66\4\0"+
    "\2\66\1\0\3\66\2\157\2\66\7\0\1\157\1\0"+
    "\1\157\33\0\1\157\5\0\1\157\24\0\2\157\6\0"+
    "\3\66\1\255\1\66\1\255\1\66\1\256\17\66\10\0"+
    "\1\256\1\66\1\255\1\66\2\0\2\66\1\255\2\0"+
    "\2\66\1\0\1\66\1\0\3\66\4\0\2\66\1\0"+
    "\3\66\2\255\2\66\4\0\1\4\6\5\1\0\14\5"+
    "\1\257\2\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\1\4\6\5\1\0\11\5"+
    "\1\260\5\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\1\4\6\5\1\0\1\5"+
    "\1\75\15\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\1\4\6\5\1\0\14\5"+
    "\1\261\2\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\1\4\6\5\1\0\14\5"+
    "\1\262\2\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\1\4\6\5\1\0\13\5"+
    "\1\263\3\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\1\4\6\5\1\0\12\5"+
    "\1\264\4\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\265"+
    "\1\0\7\5\4\0\1\4\6\5\1\0\3\5\1\266"+
    "\13\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\7\5\4\0\1\4\6\5\1\0\12\5\1\267"+
    "\4\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\7\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\270\1\0"+
    "\7\5\4\0\1\4\6\5\1\0\6\5\1\107\10\5"+
    "\11\0\1\4\2\5\2\0\3\5\2\0\2\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\271"+
    "\1\0\7\5\4\0\1\4\6\5\1\0\2\5\1\272"+
    "\14\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\7\5\4\0\1\4\6\5\1\0\7\5\1\273"+
    "\7\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\7\5\4\0\1\4\6\5\1\0\17\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\2\274\2\5\4\0\33\204\1\122\7\204\1\0\70\204"+
    "\3\120\1\210\4\120\3\204\1\0\45\204\1\120\25\204"+
    "\1\205\5\204\1\120\1\204\1\0\3\204\1\120\24\204"+
    "\2\120\6\204\33\0\1\205\50\0\5\204\1\207\25\204"+
    "\1\205\5\204\1\207\1\204\1\0\3\204\1\207\24\204"+
    "\2\207\11\204\4\275\1\204\3\275\6\204\1\275\2\204"+
    "\1\275\6\204\1\122\5\204\1\275\1\204\1\0\2\204"+
    "\2\275\5\204\1\275\16\204\2\275\1\204\1\275\4\204"+
    "\3\125\4\276\1\125\3\276\6\125\1\276\2\125\1\276"+
    "\13\125\1\214\1\276\2\125\1\215\1\125\2\276\5\125"+
    "\1\276\16\125\2\276\1\125\1\276\47\125\1\0\40\125"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\3\5\2\171\2\5\4\0"+
    "\1\4\6\5\1\0\1\171\16\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\7\5\4\0\1\4"+
    "\6\5\1\0\17\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\2\5\1\277\4\5\4\0\1\4"+
    "\6\5\1\0\14\5\1\300\2\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\7\5\4\0\1\4"+
    "\6\5\1\0\5\5\1\171\11\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\7\5\4\0\3\66"+
    "\4\223\1\0\3\223\2\66\1\301\3\66\1\223\1\302"+
    "\1\66\1\223\2\66\11\0\1\66\1\223\1\66\2\0"+
    "\1\66\2\223\2\0\1\302\1\301\1\0\1\223\1\0"+
    "\3\66\4\0\2\66\1\0\3\66\2\223\1\66\1\223"+
    "\4\0\7\4\1\0\2\4\1\140\14\4\11\0\3\4"+
    "\2\0\3\4\2\0\2\4\1\0\1\4\1\0\3\4"+
    "\4\0\2\4\1\0\7\4\4\0\7\4\1\0\1\303"+
    "\16\4\11\0\3\4\2\0\3\4\2\0\2\4\1\0"+
    "\1\4\1\0\3\4\4\0\2\4\1\0\7\4\4\0"+
    "\7\4\1\0\3\4\1\304\2\4\1\305\10\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\7\4\4\0\7\4\1\0"+
    "\7\4\1\306\7\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\7\4\4\0\7\4\1\0\1\307\3\4\1\233\12\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\7\4\4\0\7\4"+
    "\1\0\11\4\1\310\5\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\7\4\4\0\7\4\1\0\4\4\1\305\12\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\7\4\4\0\7\4"+
    "\1\0\1\307\16\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\7\4\4\0\7\4\1\0\14\4\1\311\2\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\7\4\15\0\1\312\106\0"+
    "\1\313\1\314\1\0\1\315\76\0\1\316\1\0\1\317"+
    "\102\0\1\320\104\0\1\321\106\0\1\322\64\0\1\4"+
    "\6\5\1\0\1\5\1\323\15\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\7\5\4\0\1\4"+
    "\6\5\1\0\5\5\1\166\11\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\7\5\15\0\1\246"+
    "\162\0\1\324\36\0\1\325\134\0\1\326\40\0\1\252"+
    "\162\0\1\327\36\0\1\330\134\0\1\331\27\0\3\66"+
    "\1\255\1\66\1\255\1\66\1\0\2\66\1\163\2\66"+
    "\1\163\11\66\11\0\1\66\1\255\1\66\2\0\2\66"+
    "\1\255\2\0\1\66\1\163\1\0\1\163\1\0\3\66"+
    "\4\0\2\66\1\0\3\66\2\255\2\66\7\0\1\255"+
    "\1\0\1\255\33\0\1\255\5\0\1\255\24\0\2\255"+
    "\6\0\1\4\6\5\1\0\12\5\1\332\4\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\7\5"+
    "\4\0\1\4\6\5\1\0\14\5\1\333\2\5\11\0"+
    "\1\4\2\5\2\0\3\5\2\0\2\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\7\5"+
    "\4\0\1\4\6\5\1\0\17\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\171\1\0\7\5\4\0"+
    "\1\4\6\5\1\0\7\5\1\334\7\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\7\5\4\0"+
    "\1\4\6\5\1\0\5\5\1\335\11\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\7\5\4\0"+
    "\1\4\6\5\1\0\11\5\1\107\5\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\7\5\4\0"+
    "\1\4\6\5\1\0\11\5\1\336\5\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\7\5\4\0"+
    "\1\4\6\5\1\0\6\5\1\337\10\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\7\5\4\0"+
    "\1\4\6\5\1\0\7\5\1\340\7\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\7\5\4\0"+
    "\1\4\6\5\1\0\7\5\1\341\7\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\7\5\4\0"+
    "\1\4\6\5\1\0\3\5\1\342\13\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\7\5\4\0"+
    "\1\4\6\5\1\0\10\5\1\343\6\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\7\5\4\0"+
    "\1\4\6\5\1\0\3\5\1\344\13\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\7\5\4\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\5\5\1\216\1\5\4\0"+
    "\3\204\4\120\1\204\3\120\6\204\1\120\2\204\1\120"+
    "\6\204\1\122\5\204\1\120\1\204\1\0\2\204\2\120"+
    "\5\204\1\120\16\204\2\120\1\204\1\120\4\204\3\125"+
    "\4\36\1\125\3\36\6\125\1\36\2\125\1\36\13\125"+
    "\1\214\1\36\2\125\1\215\1\125\2\36\5\125\1\36"+
    "\16\125\2\36\1\125\1\36\4\125\1\4\6\5\1\0"+
    "\3\5\1\345\13\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\7\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\1\5\1\75\5\5\4\0\7\66\1\0\12\66"+
    "\1\346\4\66\11\0\3\66\2\0\3\66\2\0\1\346"+
    "\1\66\1\0\1\66\1\0\3\66\4\0\2\66\1\0"+
    "\7\66\4\0\7\66\1\0\5\66\1\346\11\66\11\0"+
    "\3\66\2\0\3\66\2\0\1\66\1\346\1\0\1\66"+
    "\1\0\3\66\4\0\2\66\1\0\7\66\4\0\7\4"+
    "\1\0\3\4\1\304\13\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\7\4\4\0\7\4\1\0\2\4\1\347\14\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\7\4\4\0\7\4"+
    "\1\0\1\4\1\347\15\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\7\4\4\0\7\4\1\0\10\4\1\350\6\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\7\4\4\0\7\4"+
    "\1\0\1\4\1\304\15\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\7\4\4\0\7\4\1\0\5\4\1\351\11\4"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\7\4\4\0\7\4"+
    "\1\0\15\4\1\352\1\4\11\0\3\4\2\0\3\4"+
    "\2\0\2\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\7\4\16\0\1\240\101\0\1\353\106\0\1\354"+
    "\2\0\1\355\104\0\1\356\74\0\1\357\3\0\1\321"+
    "\110\0\1\360\76\0\1\355\77\0\1\357\117\0\1\361"+
    "\57\0\1\4\6\5\1\0\1\362\16\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\7\5\36\0"+
    "\1\363\67\0\1\246\51\0\1\324\14\0\1\326\1\364"+
    "\4\326\1\364\17\326\3\364\1\326\1\364\2\0\2\364"+
    "\1\0\2\326\2\0\3\326\1\0\1\364\2\326\1\364"+
    "\1\326\1\0\1\364\1\326\5\364\2\326\1\364\7\326"+
    "\2\0\1\364\33\0\1\365\67\0\1\252\51\0\1\327"+
    "\14\0\1\331\1\366\4\331\1\366\17\331\3\366\1\331"+
    "\1\366\2\0\2\366\1\0\2\331\2\0\3\331\1\0"+
    "\1\366\2\331\1\366\1\331\1\0\1\366\1\331\5\366"+
    "\2\331\1\366\7\331\2\0\1\366\1\0\1\4\6\5"+
    "\1\0\5\5\1\107\11\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\7\5\4\0\1\4\6\5"+
    "\1\0\7\5\1\367\7\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\7\5\4\0\1\4\6\5"+
    "\1\0\3\5\1\370\13\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\7\5\4\0\1\4\6\5"+
    "\1\0\1\5\1\371\15\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\7\5\4\0\1\4\6\5"+
    "\1\0\17\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\75\1\5\1\0\7\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\372\1\0\7\5\4\0\1\4\6\5\1\0\4\5"+
    "\1\75\12\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\1\4\6\5\1\0\10\5"+
    "\1\373\6\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\1\4\6\5\1\0\4\5"+
    "\1\374\12\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\1\4\6\5\1\0\7\5"+
    "\1\375\7\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\2\5\2\0\1\5\1\376\1\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\1\4\6\5\1\0\4\5"+
    "\1\377\12\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\7\4\1\0\7\4\1\347"+
    "\7\4\11\0\3\4\2\0\3\4\2\0\2\4\1\0"+
    "\1\4\1\0\3\4\4\0\2\4\1\0\7\4\4\0"+
    "\7\4\1\0\12\4\1\u0100\4\4\11\0\3\4\2\0"+
    "\3\4\2\0\2\4\1\0\1\4\1\0\3\4\4\0"+
    "\2\4\1\0\7\4\4\0\7\4\1\0\16\4\1\u0101"+
    "\11\0\3\4\2\0\3\4\2\0\2\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\7\4\17\0\1\354"+
    "\102\0\1\u0102\102\0\1\u0102\112\0\1\u0103\74\0\1\354"+
    "\107\0\1\u0104\113\0\1\u0105\56\0\1\4\6\5\1\0"+
    "\1\5\1\u0106\15\5\11\0\1\4\2\5\2\0\3\5"+
    "\2\0\2\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\7\5\36\0\1\326\103\0\1\331"+
    "\51\0\1\4\6\5\1\0\1\75\16\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\7\5\4\0"+
    "\1\4\6\5\1\0\14\5\1\u0107\2\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\7\5\4\0"+
    "\1\4\6\5\1\0\7\5\1\u0108\7\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\7\5\4\0"+
    "\1\4\6\5\1\0\1\5\1\100\15\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\7\5\4\0"+
    "\1\4\6\5\1\0\3\5\1\367\13\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\7\5\4\0"+
    "\1\4\6\5\1\0\12\5\1\166\4\5\11\0\1\4"+
    "\2\5\2\0\3\5\2\0\2\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\7\5\4\0"+
    "\1\4\6\5\1\0\16\5\1\75\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\7\5\4\0\1\4"+
    "\6\5\1\0\12\5\1\u0109\4\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\7\5\4\0\1\4"+
    "\6\5\1\0\15\5\1\75\1\5\11\0\1\4\2\5"+
    "\2\0\3\5\2\0\2\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\7\5\4\0\7\4"+
    "\1\0\1\305\16\4\11\0\3\4\2\0\3\4\2\0"+
    "\2\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\7\4\4\0\7\4\1\0\14\4\1\347\2\4\11\0"+
    "\3\4\2\0\3\4\2\0\2\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\7\4\23\0\1\u0102\106\0"+
    "\1\u010a\107\0\1\u010b\55\0\1\4\6\5\1\0\2\5"+
    "\1\75\14\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\1\4\6\5\1\0\4\5"+
    "\1\107\12\5\11\0\1\4\2\5\2\0\3\5\2\0"+
    "\2\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\7\5\4\0\1\4\6\5\1\0\17\5"+
    "\11\0\1\4\1\u010c\1\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\3\5\1\u010c\3\5\4\0\1\4\6\5\1\0"+
    "\17\5\11\0\1\4\2\5\2\0\3\5\2\0\2\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\1\5"+
    "\1\166\1\0\7\5\14\0\1\355\117\0\1\u0102\57\0"+
    "\1\4\6\5\1\0\17\5\11\0\1\4\2\5\2\0"+
    "\3\5\2\0\2\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\6\5\1\171\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16660];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\21\1\1\11\4\1\1\11\2\1\1\11\6\1"+
    "\1\11\1\1\1\11\6\1\1\11\5\1\1\11\31\1"+
    "\1\0\2\11\2\1\1\11\3\1\1\11\14\1\1\0"+
    "\2\1\2\0\1\11\6\0\1\1\1\0\24\1\1\11"+
    "\7\1\1\11\17\1\6\0\2\1\10\0\1\1\1\0"+
    "\33\1\4\0\1\1\4\0\1\1\2\0\1\1\2\0"+
    "\22\1\7\0\1\1\4\0\13\1\1\11\3\0\4\1"+
    "\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public GLSLTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *                    <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
//			return new Token();
                        return new DefaultToken();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() throws java.io.IOException {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) throws java.io.IOException {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos /*= zzPushbackPos*/ = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public GLSLTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public GLSLTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 170) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
//  private boolean zzRefill() throws java.io.IOException {
//
//    /* first: make room (if you can) */
//    if (zzStartRead > 0) {
//      System.arraycopy(zzBuffer, zzStartRead,
//                       zzBuffer, 0,
//                       zzEndRead-zzStartRead);
//
//      /* translate stored positions */
//      zzEndRead-= zzStartRead;
//      zzCurrentPos-= zzStartRead;
//      zzMarkedPos-= zzStartRead;
//      zzStartRead = 0;
//    }
//
//    /* is the buffer big enough? */
//    if (zzCurrentPos >= zzBuffer.length) {
//      /* if not: blow it up */
//      char newBuffer[] = new char[zzCurrentPos*2];
//      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
//      zzBuffer = newBuffer;
//    }
//
//    /* finally: fill the buffer with new input */
//    int numRead = zzReader.read(zzBuffer, zzEndRead,
//                                            zzBuffer.length-zzEndRead);
//
//    if (numRead > 0) {
//      zzEndRead+= numRead;
//      return false;
//    }
//    // unlikely but not impossible: read 0 characters, but not at end of stream    
//    if (numRead == 0) {
//      int c = zzReader.read();
//      if (c == -1) {
//        return true;
//      } else {
//        zzBuffer[zzEndRead++] = (char) c;
//        return false;
//      }     
//    }
//
//	// numRead < 0
//    return true;
//  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
//  public final void yyreset(java.io.Reader reader) {
//    zzReader = reader;
//    zzAtBOL  = true;
//    zzAtEOF  = false;
//    zzEOFDone = false;
//    zzEndRead = zzStartRead = 0;
//    zzCurrentPos = zzMarkedPos = 0;
//    yyline = yychar = yycolumn = 0;
//    zzLexicalState = YYINITIAL;
//  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 26: 
          { addToken(Token.PREPROCESSOR);
          }
        case 29: break;
        case 7: 
          { addNullToken(); return firstToken;
          }
        case 30: break;
        case 23: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 31: break;
        case 21: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 32: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 33: break;
        case 9: 
          { addToken(Token.WHITESPACE);
          }
        case 34: break;
        case 25: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 35: break;
        case 18: 
          { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
          }
        case 36: break;
        case 24: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 37: break;
        case 14: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 38: break;
        case 15: 
          { addToken(Token.RESERVED_WORD);
          }
        case 39: break;
        case 5: 
          { addToken(Token.SEPARATOR);
          }
        case 40: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 41: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 42: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 43: break;
        case 6: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 44: break;
        case 8: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 45: break;
        case 22: 
          { addToken(Token.DATA_TYPE);
          }
        case 46: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 47: break;
        case 19: 
          { addToken(Token.ERROR_CHAR);
          }
        case 48: break;
        case 20: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 49: break;
        case 28: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 50: break;
        case 27: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 51: break;
        case 13: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 52: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 53: break;
        case 4: 
          { addToken(Token.OPERATOR);
          }
        case 54: break;
        case 10: 
          { 
          }
        case 55: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 56: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 269: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 270: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 271: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
